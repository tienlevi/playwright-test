name: PR Screenshot Preview

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  screenshot-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        run: pnpm exec playwright test

      - name: Upload screenshots and comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const pr = context.payload.pull_request;
            const screenshotDir = 'public';

            // Function to upload image to GitHub
            async function uploadImage(imagePath, fileName) {
              try {
                const imageBuffer = fs.readFileSync(imagePath);
                const base64Content = imageBuffer.toString('base64');
                
                const response = await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: `public/fullpage.png`,
                  message: `Add screenshot from PR #${pr.number}`,
                  content: base64Content,
                  branch: context.ref.replace('refs/heads/', '')
                });
                
                return response.data.content.download_url;
              } catch (error) {
                console.error(`Error uploading ${fileName}:`, error);
                return null;
              }
            }

            // Check for screenshots in public directory
            let screenshotUrls = [];

            if (fs.existsSync(screenshotDir)) {
              const files = fs.readdirSync(screenshotDir);
              const imageFiles = files.filter(file => 
                file.toLowerCase().match(/\.(png|jpg|jpeg|gif|webp)$/i)
              );
              
              console.log('Found image files:', imageFiles);
              
              for (const file of imageFiles) {
                const filePath = path.join(screenshotDir, file);
                console.log(`Uploading ${file}...`);
                const url = await uploadImage(filePath, file);
                if (url) {
                  screenshotUrls.push({ name: file, url: url });
                }
              }
            }

            // Create comment with screenshots
            if (screenshotUrls.length > 0) {
              let commentBody = `🧪 **Playwright Test Screenshots**\n\n`;
              commentBody += `Screenshots captured from PR #${pr.number}:\n\n`;
              
              for (const screenshot of screenshotUrls) {
                commentBody += `### ${screenshot.name}\n`;
                commentBody += `![${screenshot.name}](${screenshot.url})\n\n`;
              }
              
              commentBody += `---\n`;
              commentBody += `🔍 These screenshots show the visual state of your application during testing.\n`;
              commentBody += `📅 Generated on: ${new Date().toISOString()}\n`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: commentBody
              });
            } else {
              console.log('No screenshots found in public directory');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `🧪 **Playwright Tests Completed**\n\nNo screenshots were generated during this test run.`
              });
            }
