name: Playwright Tests with Snapshot Comments

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  playwright-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        continue-on-error: true
        run: pnpm exec playwright test

      - name: Process test results and snapshots
        id: process_results
        run: |
          # Check if there are any test results
          if [ -f "test-results/results.json" ]; then
            echo "TEST_RESULTS_EXIST=true" >> $GITHUB_OUTPUT
          else
            echo "TEST_RESULTS_EXIST=false" >> $GITHUB_OUTPUT
          fi

          # Check for snapshot updates/differences
          if [ -d "test-results" ]; then
            # Count test result artifacts
            ARTIFACT_COUNT=$(find test-results -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l)
            echo "ARTIFACT_COUNT=$ARTIFACT_COUNT" >> $GITHUB_OUTPUT
          else
            echo "ARTIFACT_COUNT=0" >> $GITHUB_OUTPUT
          fi

          # Check for HTML report
          if [ -f "playwright-report/index.html" ]; then
            echo "HTML_REPORT_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "HTML_REPORT_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Playwright Test Results
        if: steps.process_results.outputs.TEST_RESULTS_EXIST == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results-${{ github.run_id }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload Test Screenshots
        if: steps.process_results.outputs.ARTIFACT_COUNT != '0'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots-${{ github.run_id }}
          path: test-results/**/*.png
          retention-days: 30

      - name: Comment PR with test results
        if: steps.process_results.outputs.TEST_RESULTS_EXIST == 'true' || steps.process_results.outputs.HTML_REPORT_EXISTS == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const runId = context.runId;
            const artifactCount = "${{ steps.process_results.outputs.ARTIFACT_COUNT }}";
            const htmlReportExists = "${{ steps.process_results.outputs.HTML_REPORT_EXISTS }}" === 'true';

            let commentBody = 'ðŸ§ª **Playwright Test Results:**\n\n';

            // Add test report link
            if (htmlReportExists) {
              commentBody += `ðŸ“Š **Test Report:** [View detailed HTML report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId})\n\n`;
            }

            // Add artifact information
            if (parseInt(artifactCount) > 0) {
              commentBody += `ðŸ“¸ **Screenshots:** ${artifactCount} screenshot(s) captured\n`;
              commentBody += `ðŸ”— **Download Artifacts:** [Test Results & Screenshots](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId})\n\n`;
            }

            commentBody += `âš¡ **Run ID:** ${runId}\n`;
            commentBody += `ðŸ”„ **Commit:** ${pr.head.sha.substring(0, 7)}\n\n`;
            commentBody += '> Snapshots are automatically compared using Playwright\'s built-in visual regression testing. Check the artifacts above for detailed results.';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: commentBody
            });
