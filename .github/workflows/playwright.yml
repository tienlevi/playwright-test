name: Playwright Screenshot to PR Comment

on:
  pull_request:
    types: [opened, synchronize, reopened] # Trigger on PR open, updates, and reopens

jobs:
  post-screenshot:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push to the assets branch
      pull-requests: write # Required to comment on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright and dependencies
        run: |
          npm install playwright # or yarn add playwright
          npx playwright install --with-deps

      - name: Run Playwright test and take snapshot
        run: |
          # Replace with your actual Playwright test command that generates a screenshot
          # For example, if you have a test file that takes a screenshot to 'test-results/fullpage.png'
          echo "Running Playwright test..."
          npx playwright test your-test-file.spec.ts --project=chromium # Or whatever generates your screenshot
          mv public/fullpage.png fullpage.png # Adjust path if different

      - name: Upload screenshot to a dedicated branch
        id: upload_screenshot
        run: |
          SCREENSHOT_PATH="fullpage.png" # Adjust if your screenshot has a different name
          SCREENSHOT_DIR="pr-screenshots"
          REF_NAME="refs/heads/pr-${{ github.event.pull_request.number }}-screenshots"

          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if the screenshot file exists
          if [ ! -f "$SCREENSHOT_PATH" ]; then
            echo "Screenshot file not found at $SCREENSHOT_PATH. Skipping upload."
            echo "::set-output name=image_url::" # Set empty output
            exit 0
          fi

          # Create a temporary directory and clone the repo into it
          TEMP_DIR=$(mktemp -d)
          git clone "https://github.com/${{ github.repository }}" "$TEMP_DIR"
          cd "$TEMP_DIR"

          # Create or checkout the specific PR screenshot branch
          git checkout $REF_NAME || git checkout --orphan $REF_NAME

          # Remove all files from the current branch, but keep .git
          git rm -rf .

          # Create the directory for the screenshot if it doesn't exist
          mkdir -p $SCREENSHOT_DIR

          # Copy the screenshot into the dedicated directory
          cp "${{ github.workspace }}/$SCREENSHOT_PATH" "$SCREENSHOT_DIR/"

          # Add and commit the screenshot
          git add "$SCREENSHOT_DIR/$SCREENSHOT_PATH"
          git commit -m "Add screenshot for PR #${{ github.event.pull_request.number }}"

          # Force push the branch (this branch is self-contained for each PR)
          git push origin $REF_NAME -f

          # Generate the raw URL for the image
          # This URL will render directly as an image in GitHub comments
          IMAGE_URL="https://raw.githubusercontent.com/${{ github.repository }}/${REF_NAME}/${SCREENSHOT_DIR}/$(basename $SCREENSHOT_PATH)"
          echo "::set-output name=image_url::$IMAGE_URL"
        shell: bash

      - name: Post screenshot to PR comment
        if: steps.upload_screenshot.outputs.image_url != '' # Only post if an image was uploaded
        uses: actions/github-script@v7
        with:
          script: |
            const imageUrl = '${{ steps.upload_screenshot.outputs.image_url }}';
            const prNumber = context.issue.number;
            const commentBody = `## Playwright Screenshot for PR #${prNumber}

            Here's a snapshot from the Playwright test run:

            ![Playwright Screenshot]( ${imageUrl} )

            _Generated by GitHub Actions._
            `;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
